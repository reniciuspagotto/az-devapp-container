name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AZURE_WEBAPP_NAME: azapprpc-appservice
  IMAGE_NAME: "azapp"
  AZ_REGISTRY: "azdevrpf.azurecr.io"

jobs:
  build:
    name: Build | Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x 
      
      - name: Dotnet Build
        run: |
          dotnet restore
          dotnet build

      - name: Dotnet Test
        run: dotnet test

  image-security:
    name: Security | Trivy Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Trivy DB sha
        id: trivy-db 
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          endpoint='/orgs/aquasecurity/packages/container/trivy-db/versions'
          headers='Accept: application/vnd.github+json'
          jqFilter='.[] | select(.metadata.container.tags[] | contains("latest")) | .name | sub("sha256:";"")'
          sha=$(gh api -H "${headers}" "${endpoint}" | jq --raw-output "${jqFilter}")
          echo "Trivy DB sha256:${sha}"
          echo "sha=${sha}" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        with:
          path: .trivy
          key: trivy-db-${{ steps.trivy-db.outputs.sha }}

      - name: Build an image from Dockerfile
        run: |
          docker build -t ${{ env.AZ_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
      
      - name: Trivy Scanner | Dockerfile
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: '${{ env.AZ_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          scanners: vuln
          cache-dir: .trivy

      - name: Grant Trivy Permissions
        run: sudo chown -R $(stat . -c %u:%g) .trivy
  
  app-security:
    name: Security | Snyk Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            8.0.x
      
      - name: Dotnet Restore
        run: dotnet restore

      - name: Snyk Test
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=./AzAppDevContainer.sln --severity-threshold=low

      - name: Snyk Monitor
        uses: snyk/actions/dotnet@master  
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --file=./AzAppDevContainer.sln

  az-registry:
    name: Publish Artifact to Azure Container Registry
    runs-on: ubuntu-latest
    needs: [ build, image-security, app-security ]
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZ_REGISTRY }}
          username: ${{ secrets.AZ_SP_CLIENT_ID }}
          password: ${{ secrets.AZ_SP_CLIENT_SECRET }}

      - name: Retrieve Image Version
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.AZ_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Azure Web App Deployment
    runs-on: ubuntu-latest
    needs: [ az-registry ]
    steps:
      - name: Login Azure
        env:
          AAD_SERVICE_PRINCIPAL_CLIENT_ID: ${{ secrets.AZ_SP_CLIENT_ID }}
          AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: ${{ secrets.AZ_SP_CLIENT_SECRET }}
        run: |
          az login --service-principal -u ${{ secrets.AZ_SP_CLIENT_ID }} -p ${{ secrets.AZ_SP_CLIENT_SECRET }} --tenant ${{ secrets.AZ_TENANT_ID }}
          az account set -s ${{ secrets.AZ_SUBSCRIPTION_ID }}
          az account show

      - name: Azure Web Apps Deployment
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.AZ_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.az-registry.outputs.version }}